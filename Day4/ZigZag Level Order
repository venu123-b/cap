/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
import java.util.*;
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list1 = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        List<Integer> list2 = new ArrayList<>();
        if(root==null){
            return list1;
        }
        list2.add(root.val);
        list1.add(list2);
        queue.offer(root);
        int level=0;
        while(!queue.isEmpty()){
            int size=queue.size();
            list2 = new ArrayList<>();
            for(int i=0;i<size;i++){
                TreeNode curr = queue.poll();
                if(curr.left!=null){
                    queue.add(curr.left);
                    list2.add(curr.left.val);
                }
                if(curr.right!=null){
                    queue.add(curr.right);
                    list2.add(curr.right.val);
                }
                
            }
            if(level%2==0){
                    Collections.reverse(list2);
                    list1.add(list2);
                }
                
                else{
                    list1.add(list2);
                }
            level++;
        }
        list1.remove(list1.size()-1);
        return list1;

    }
}
