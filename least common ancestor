class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null){
            return null;
        }
        if(root==p || root==q){
            return root;
        }
        TreeNode left= lowestCommonAncestor(root.left,p,q);
        TreeNode right=lowestCommonAncestor(root.right,p,q);
        if(left!=null && right!= null){
            return root;
        }
        if(left !=null){
            return left;
        }
        if(right !=null){
            return right;
        }
        return null;
        
    }
}






//zig-zag level order
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list1=new ArrayList<>();
        Queue<TreeNode> queue =new LinkedList<>();
        List<Integer> list2= new ArrayList<>();
        if(root ==null){
            return list1;
        }
        int level=0;
        list2.add(root.val);
        list1.add(list2);
        queue.add(root);
        while(!queue.isEmpty()){
            list2= new ArrayList<>();

            int size= queue.size();
            for(int i=0;i<size;i++){
                TreeNode curr = queue.poll();

                if(curr.left!=null){
                    list2.add(curr.left.val);
                    queue.add(curr.left);
                }
                if(curr.right!=null){
                    list2.add(curr.right.val);
                    queue.add(curr.right);

                }
            }
            if(level%2==0){
                Collections.reverse(list2);
                list1.add(list2);
            }
            else{
                list1.add(list2);
            }
            level++;

        }
        list1.remove(list1.size()-1);
        return list1;
        
    }
}






//right view ......
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> list=new ArrayList<>();
        Queue<TreeNode> queue=new LinkedList<>();
        if(root ==null){
            return list;
        }

        queue.add(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i=1;i<=size;i++){
                TreeNode curr=queue.poll();
                if(i==size){
                    list.add(curr.val);
                }
                if(curr.left!=null){
                    
                    queue.add(curr.left);
                }
                if(curr.right!=null){
                    
                    queue.add(curr.right);

                }

                
                
               
            }
            
        }
        return list;

        
    }
}
////513.bottom left view
class Solution {
    public int findBottomLeftValue(TreeNode root) {
        
    
    
        
        List<List<Integer>> list1 = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        List<Integer> list2 = new ArrayList<>();
        if(root==null){
            return 0 ;
        }
        list2.add(root.val);
        list1.add(list2);
        queue.add(root);

        while(!queue.isEmpty()){
            int size = queue.size();
            list2 = new ArrayList<>();
            for(int i = 0;i<size;i++){
                TreeNode curr = queue.poll();
                if(curr.left!=null){
                    queue.add(curr.left);
                    list2.add(curr.left.val);
                }
                if(curr.right!=null){
                    queue.add(curr.right);
                    list2.add(curr.right.val);
                }
            }
            list1.add(list2);
        }
        list1.remove(list1.size()-1);
        return list1.get(list1.size()-1).get(0);

    }    
    
}
